---
openapi: 3.0.3
info:
  title: OpenTalk Controller Frontend API
  description: Specifies the endpoints and structure of the OpenTalk Controller Frontend API
  contact:
    name: OpenTalk Team
    email: mail@opentalk.eu
  license:
    name: EUPL-1.2
  version: 0.0.0-dev
servers:
  - url: /v1
paths:
  /auth/login:
    get:
      tags:
        - "api::v1::auth"
      summary: Get the configured OIDC provider
      description: |
        Returns the relevant information for a frontend to authenticate against the
        configured OIDC provider for the OpenTalk service.
      operationId: get_login
      responses:
        "200":
          description: Get information about the OIDC provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security: []
    post:
      tags:
        - "api::v1::auth"
      summary: The login endpoint
      description: |
        Attempt to authenticate with a provided ID token. The ID token can be
        received from an OIDC provider and contains information about the requesting
        user as well as an expiration timestamp. When a valid token with an unknown user
        is provided, a new user will be created in the database.
      operationId: post_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostLoginRequestBody"
        required: true
      responses:
        "200":
          description: "Login successful, answer contains a list of permissions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostLoginResponse"
              example:
                permissions: []
        "400":
          description: The provided ID token is malformed or contains invalid claims
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
              example:
                code: invalid_claims
                message: some required attributes are missing or malformed
        "401":
          description: The provided ID token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
              example:
                code: unauthorized
                message: Authentication failed
        "500":
          $ref: "#/components/responses/InternalServerError"
      security: []
  /rooms:
    get:
      tags:
        - "api::v1::rooms"
      summary: Get a list of rooms accessible by the requesting user
      description: |
        All rooms accessible to the requesting user are returned in a list. If no
        pagination query is added, the default page size is used.
      operationId: accessible
      parameters:
        - name: per_page
          in: query
          description: The number of entries per page
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The number of the page
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of accessible rooms successfully returned
          headers:
            link:
              schema:
                $ref: "#/components/schemas/PageLink"
              description: Links for paging through the results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRoomsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    post:
      tags:
        - "api::v1::rooms"
      summary: Create a new room
      description: Creates a new room withh the settings given in the request body.
      operationId: new
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRoomsRequestBody"
        required: true
      responses:
        "201":
          description: Room successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResource"
        "400":
          description: Wrong syntax or bad values such as invalid owner id received in the body
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: Invalid body contents received
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  /users/me:
    get:
      tags:
        - "api::v1::users"
      summary: "Get the current user's profile"
      description: |
        Returns the private user profile of the currently logged-in user. This
        private profile contains information that is not visible in the public
        profile, such as tariff status or the used storage.
      operationId: get_me
      responses:
        "200":
          description: Information about the logged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUserProfile"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
components:
  schemas:
    ErrorBody:
      oneOf:
        - $ref: "#/components/schemas/StandardErrorBody"
        - $ref: "#/components/schemas/ValidationErrorBody"
      description: The body of an error response
    GetLoginResponse:
      type: object
      description: "Body of the response to a *GET* request on `/auth/login`"
      required:
        - oidc
      properties:
        oidc:
          $ref: "#/components/schemas/OidcProvider"
    GetRoomsResponse:
      type: array
      items:
        $ref: "#/components/schemas/RoomResource"
      description: "The JSON body returned by the `/rooms` `GET` endpoint"
    OidcProvider:
      type: object
      description: Represents an OIDC provider
      required:
        - name
        - url
      properties:
        name:
          type: string
          description: The name of the provider
        url:
          type: string
          description: The url of the provider
    PageLink:
      type: string
      example: "<https://api.example.org/resource?page=2>; rel='next', <https://api.example.org/resource?page=5>; rel='last'"
    PostLoginRequestBody:
      type: object
      description: "Body of a *POST* request on `/auth/login`"
      required:
        - id_token
      properties:
        id_token:
          type: string
          description: The id token to use for the login
          example: bG9yZW0gaXBzdW0sIHF1aWEgZG9sb3Igc2
    PostLoginResponse:
      type: object
      description: "Body of the response to a *POST* request on `/auth/login`"
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            type: string
          description: Permissions is a set of strings that each define a permission a user has.
          uniqueItems: true
    PostRoomsRequestBody:
      type: object
      description: API request parameters to create a new room
      properties:
        enable_sip:
          type: boolean
          description: Enable/Disable sip for this room; defaults to false when not set
        password:
          type: string
          description: "The password to the room, if any"
          nullable: true
          maxLength: 255
          minLength: 1
        waiting_room:
          type: boolean
          description: |
            Indicates whether the meeting room should have the waiting room enabled.
            When not present, the waiting room will be disabled.
    PrivateUserProfile:
      type: object
      description: |
        Private user profile.
        
        Similar to [`PublicUserProfile`], but contains additional "private" information about a user.
        Is only accessible to the user himself.
        Is used on */users/me* endpoints.
      required:
        - id
        - email
        - title
        - firstname
        - lastname
        - display_name
        - avatar_url
        - dashboard_theme
        - conference_theme
        - language
        - tariff_status
        - used_storage
      properties:
        avatar_url:
          type: string
          description: "The user's avatar URL"
        conference_theme:
          type: string
          description: The conference theme
        dashboard_theme:
          type: string
          description: The dashboard theme
        display_name:
          type: string
          description: "The user's display name"
        email:
          type: string
          description: The email of the user
        firstname:
          type: string
          description: "The user's first name"
        id:
          $ref: "#/components/schemas/UserId"
        language:
          type: string
          description: The language for the user
        lastname:
          type: string
          description: "The user's last name"
        tariff_status:
          $ref: "#/components/schemas/TariffStatus"
        title:
          type: string
          description: The title of the user
        used_storage:
          type: integer
          format: int64
          description: "The user's used storage"
          minimum: 0
    PublicUserProfile:
      type: object
      description: |
        Public user details.
        
        Contains general "public" information about a user. Is accessible to all other users.
      required:
        - id
        - email
        - title
        - firstname
        - lastname
        - display_name
        - avatar_url
      properties:
        avatar_url:
          type: string
          description: "The user's avatar URL"
        display_name:
          type: string
          description: "The user's display name"
        email:
          type: string
          description: The email of the user
        firstname:
          type: string
          description: "The user's first name"
        id:
          $ref: "#/components/schemas/UserId"
        lastname:
          type: string
          description: "The user's last name"
        title:
          type: string
          description: The title of the user
    RoomId:
      type: string
      format: uuid
      description: The id of a room
    RoomResource:
      type: object
      description: |
        A Room
        
        Contains all room information. Is only be accessible to the owner and users with
        appropriate permissions.
      required:
        - id
        - created_by
        - created_at
        - waiting_room
      properties:
        created_at:
          $ref: "#/components/schemas/Timestamp"
        created_by:
          $ref: "#/components/schemas/PublicUserProfile"
        id:
          $ref: "#/components/schemas/RoomId"
        password:
          type: string
          description: "The password of the room, if any"
          nullable: true
        waiting_room:
          type: boolean
          description: If waiting room is enabled
    StandardErrorBody:
      type: object
      description: Standard API error body
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Machine readable error code
        message:
          type: string
          description: Human readable message
    TariffStatus:
      type: string
      enum:
        - default
        - paid
        - downgraded
    Timestamp:
      type: string
      format: date-time
      description: |
        A UTC DateTime wrapper that implements ToRedisArgs and FromRedisValue.
        
        The values are stores as unix timestamps in redis.
    UserId:
      type: string
      format: uuid
      description: The id of a user
    ValidationErrorBody:
      type: object
      description: The body of a validation error response
      required:
        - code
        - message
        - errors
      properties:
        code:
          type: string
          description: Machine readable error message
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationErrorEntry"
          description: A list validation errors
        message:
          type: string
          description: Human readable message
    ValidationErrorEntry:
      type: object
      description: An entry in a validation error list
      required:
        - code
      properties:
        code:
          type: string
          description: Machine readable error message
        field:
          type: string
          description: |
            The field related to the error
            
            If the value is [`None`] that means the error happened at struct level
          nullable: true
        message:
          type: string
          description: Human readable error message
          nullable: true
  responses:
    InternalServerError:
      description: An internal server error occurred
    Unauthorized:
      description: |
        The provided access token is expired or the provided id or access token is invalid.
                The WWW-Authenticate header will contain an error description 'session expired' to distinguish between
                an invalid and an expired token
      headers:
        www-authenticate:
          schema:
            type: string
          description: |
            
            Will contain 'session expired' to distinguish between an invalid and an expired token.
            
            Examples:
            
                Bearer error="invalid_token", error_description="The provided access token is invalid"
                Bearer error="invalid_request", error_description="The user session expired"
      content:
        application/json:
          schema:
            type: object
            description: Internal reusable dummy type for utoipa unauthorized error
            required:
              - code
              - message
            properties:
              code:
                type: string
                description: Machine readable error code
              message:
                type: string
                description: Human readable message
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
tags:
  - name: "api::v1::auth"
    description: Endpoints related to authentication
  - name: "api::v1::invites"
    description: Endpoints related to meeting invites
  - name: "api::v1::rooms"
    description: Endpoints related to meeting rooms
  - name: "api::v1::assets"
    description: Endpoints related to file assets
  - name: "api::v1::sip_configs"
    description: Endpoints related to SIP configuration
  - name: "api::v1::services::recording"
    description: Endpoints related to the meeting recording service
  - name: "api::v1::turn"
    description: Endpoints related TURN server usage
  - name: "api::v1::users"
    description: Endpoints related to user information and management