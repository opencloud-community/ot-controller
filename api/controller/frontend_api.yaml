---
openapi: 3.0.3
info:
  title: OpenTalk Controller Frontend API
  description: Specifies the endpoints and structure of the OpenTalk Controller Frontend API
  contact:
    name: OpenTalk Team
    email: mail@opentalk.eu
  license:
    name: EUPL-1.2
  version: 0.0.0-dev
servers:
  - url: /v1
paths:
  /auth/login:
    get:
      tags:
        - "api::v1::auth"
      summary: Get the configured OIDC provider
      description: |
        Returns the relevant information for a frontend to authenticate against the
        configured OIDC provider for the OpenTalk service.
      operationId: get_login
      responses:
        "200":
          description: Get information about the OIDC provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security: []
    post:
      tags:
        - "api::v1::auth"
      summary: The login endpoint
      description: |
        Attempt to authenticate with a provided ID token. The ID token can be
        received from an OIDC provider and contains information about the requesting
        user as well as an expiration timestamp. When a valid token with an unknown user
        is provided, a new user will be created in the database.
      operationId: post_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostLoginRequestBody"
        required: true
      responses:
        "200":
          description: "Login successful, answer contains a list of permissions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostLoginResponse"
              example:
                permissions: []
        "400":
          description: The provided ID token is malformed or contains invalid claims
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
              example:
                code: invalid_claims
                message: some required attributes are missing or malformed
        "401":
          description: The provided ID token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBody"
              example:
                code: unauthorized
                message: Authentication failed
        "500":
          $ref: "#/components/responses/InternalServerError"
      security: []
  /invite/verify:
    post:
      tags:
        - "api::v1::invites"
      summary: Verify an invite code
      description: Verifies the invite and returns the room url for the invite code
      operationId: verify_invite_code
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInviteVerifyRequestBody"
        required: true
      responses:
        "200":
          description: "Invite is valid, the response body tells the room id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeVerified"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          description: Invalid body contents received
        "500":
          $ref: "#/components/responses/InternalServerError"
      security: []
  /rooms:
    get:
      tags:
        - "api::v1::rooms"
      summary: Get a list of rooms accessible by the requesting user
      description: |
        All rooms accessible to the requesting user are returned in a list. If no
        pagination query is added, the default page size is used.
      operationId: accessible
      parameters:
        - name: per_page
          in: query
          description: The number of entries per page
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The number of the page
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of accessible rooms successfully returned
          headers:
            link:
              schema:
                $ref: "#/components/schemas/PageLink"
              description: Links for paging through the results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRoomsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    post:
      tags:
        - "api::v1::rooms"
      summary: Create a new room
      description: Creates a new room withh the settings given in the request body.
      operationId: new
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRoomsRequestBody"
        required: true
      responses:
        "201":
          description: Room successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResource"
        "400":
          description: Wrong syntax or bad values such as invalid owner id received in the body
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          description: Invalid body contents received
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}":
    get:
      tags:
        - "api::v1::rooms"
      summary: Get a room
      description: Returns the room resource including additional information such as the creator profile.
      operationId: get
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      responses:
        "200":
          description: Room was successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResource"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - "api::v1::rooms"
      summary: Delete a room and its owned resources.
      description: |
        Deletes the room by the id if found. See the query parameters for affecting
        the behavior of this endpoint, such as mail notification suppression, or
        succeding even if external resources cannot be successfully deleted.
      operationId: delete
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: force_delete_reference_if_external_services_fail
          in: query
          description: Flag to force delete the reference if the deletion at the external services fails
          required: false
          schema:
            type: boolean
        - name: suppress_email_notification
          in: query
          description: Flag to disable email notification
          required: false
          schema:
            type: boolean
      responses:
        "204":
          description: Room was successfully deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    patch:
      tags:
        - "api::v1::rooms"
      summary: Patch a room with the provided fields
      description: Fields that are not provided in the request body will remain unchanged.
      operationId: patch_room
      parameters:
        - name: room_id
          in: path
          description: The id of the room to be modified
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRoomsRequestBody"
        required: true
      responses:
        "200":
          description: Room was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResource"
        "400":
          description: |
            Could not modify the specified room due to wrong
                            syntax or bad values, for example an invalid owner id
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}/assets":
    get:
      tags:
        - "api::v1::assets"
      summary: Get the assets associated with a room.
      description: |
        This returns assets that are available for a room. If no
        pagination query is added, the default page size is used.
      operationId: room_assets
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: per_page
          in: query
          description: The number of entries per page
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The number of the page
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The assets have been returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRoomsAssetsResponseBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}/assets/{asset_id}":
    get:
      tags:
        - "api::v1::assets"
      summary: Get a specific asset inside a room.
      description: |
        This will return the plain asset contents, e.g. the binary file contents or
        whatever else is stored inside the asset storage.
      operationId: room_asset
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: asset_id
          in: path
          description: The id of the asset
          required: true
          schema:
            $ref: "#/components/schemas/AssetId"
      responses:
        "200":
          $ref: "#/components/responses/BinaryData"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - "api::v1::assets"
      summary: Delete an asset from a room.
      description: The asset is removed from the room and deleted from the storage.
      operationId: delete_room_asset
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: asset_id
          in: path
          description: The id of the asset
          required: true
          schema:
            $ref: "#/components/schemas/AssetId"
      responses:
        "204":
          description: The asset has been deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}/event":
    get:
      tags:
        - "api::v1::rooms"
      summary: "Get a room's event"
      description: |
        This returns the event with which the room is associated. Please note
        that rooms can exist without events, in which case a `404` status will be
        returned.
      operationId: get_room_event
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      responses:
        "200":
          description: "The room's event was successfully retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TariffResource"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
        - InviteCode: []
  "/rooms/{room_id}/invites":
    get:
      tags:
        - "api::v1::invites"
      summary: Get all invites for a room
      description: |
        This returns all invites that are available for a room. If no
        pagination query is added, the default page size is used.
      operationId: get_invites
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: per_page
          in: query
          description: The number of entries per page
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The number of the page
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The invites could be loaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRoomsInvitesResponseBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    post:
      tags:
        - "api::v1::invites"
      summary: Create a new invite
      description: A new invite to the room is created with the information in the body.
      operationId: add_invite
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInviteRequestBody"
        required: true
      responses:
        "200":
          description: Successfully create a new invite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResource"
        "400":
          description: |
            Could not create a new invite due to wrong syntax or
                            bad values, for example an invalid owner id.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}/invites/{invite_code}":
    get:
      tags:
        - "api::v1::invites"
      summary: Get a room invite
      description: Returns the room invite resource
      operationId: get_invite
      parameters:
        - name: room_id
          in: path
          description: The room id for the invite
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: invite_code
          in: path
          description: The invite code id
          required: true
          schema:
            $ref: "#/components/schemas/InviteCodeId"
      responses:
        "200":
          description: Successfully retrieved the room invite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResource"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    put:
      tags:
        - "api::v1::invites"
      summary: Update an invite code
      description: Updates the field values as set in the request body.
      operationId: update_invite
      parameters:
        - name: room_id
          in: path
          description: The room id for the invite
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: invite_code
          in: path
          description: The invite code id
          required: true
          schema:
            $ref: "#/components/schemas/InviteCodeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutInviteRequestBody"
        required: true
      responses:
        "200":
          description: Successfully updated the room invite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResource"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - "api::v1::invites"
      summary: Delete an invite code
      description: The invite code will no longer be usable once it is deleted.
      operationId: delete_invite
      parameters:
        - name: room_id
          in: path
          description: The room id for the invite
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
        - name: invite_code
          in: path
          description: The invite code id
          required: true
          schema:
            $ref: "#/components/schemas/InviteCodeId"
      responses:
        "204":
          description: Successfully deleted the room invite
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}/sip":
    get:
      tags:
        - "api::v1::sip_configs"
      summary: Get the sip config for the specified room.
      description: |
        Returns the sip config if available for the room, otherwise `404 NOT_FOUND`
        is returned.
      operationId: get_room_sip
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      responses:
        "200":
          description: The SIP config is successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SipConfigResource"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    put:
      tags:
        - "api::v1::sip_configs"
      summary: Modify the sip configuration of a room. A new sip configuration is created
      description: |
        if none was set before.
        
        Returns the new modified sip configuration.
        Get the sip config for the specified room.
      operationId: put
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutSipConfig"
        required: true
      responses:
        "200":
          description: The SIP configuration was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SipConfigResource"
        "201":
          description: A new SIP configuration was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SipConfigResource"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - "api::v1::sip_configs"
      summary: Delete the SIP configuration of a room.
      description: This removes the dial-in functionality from the room.
      operationId: delete_room_sip
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      responses:
        "204":
          description: The SIP configuration was successfully deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}/start":
    post:
      tags:
        - "api::v1::rooms"
      summary: Start a signaling session as a registered user
      description: |
        This endpoint has to be called in order to get a room ticket. When joining a room, the ticket
        must be provided as a `Sec-WebSocket-Protocol` header field when starting the WebSocket
        connection.
      operationId: start
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRoomsStartRequestBody"
        required: true
      responses:
        "200":
          description: Returns the information for joining the room
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomsStartResponse"
        "400":
          description: "Either no breakout rooms were found for this room, or the breakout room id is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              examples:
                InvalidBreakoutRoomId:
                  summary: Invalid breakout room id
                  value:
                    code: invalid_breakout_room_id
                    message: The provided breakout room ID is invalid
                NoBreakoutRooms:
                  summary: No breakout rooms
                  value:
                    code: no_breakout_rooms
                    message: The requested room has no breakout rooms
        "401":
          description: |
            The provided AccessToken is expired or the
                            provided ID- or Access-Token is invalid. The WWW-Authenticate
                            header will contain a error description 'session expired' to
                            distinguish between an invalid and an expired token.
          headers:
            www-authenticate:
              schema:
                type: string
              description: "will contain 'session expired' to distinguish between an invalid and an expired token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
        "403":
          description: The user has not been invited to join the room or has been banned from entering this room
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              examples:
                UserBanned:
                  summary: User has been banned from the room
                  value:
                    code: banned_from_room
                    message: This user has been banned from entering this room
                UserNotInvited:
                  summary: User has not been invited to join the room
                  value:
                    code: forbidden
                    message: Access to the requested resource is forbidden
        "404":
          description: The specified room could not be found or it has no event associated with it
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              example:
                code: not_found
                message: A requested resource could not be found
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  "/rooms/{room_id}/start_invited":
    post:
      tags:
        - "api::v1::rooms"
      summary: Start a signaling session for an invitation code
      description: |
        Returns a ticket to be used with the `/signaling` endpoint. When joining a
        room, the ticket must be provided as `Sec-WebSocket-Protocol` header field
        when starting the WebSocket connection. When the requested room has a
        password set, the requester must provide the correct password through the
        requests body. When the request has no password set, the password will be
        ignored if provided.
      operationId: start_invited
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRoomsStartInvitedRequestBody"
        required: true
      responses:
        "200":
          description: Response body includes the information needed to connect to the signaling endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomsStartResponse"
        "400":
          description: |
            The provided ID token is malformed or contains
                            invalid claims,  no breakout rooms were found for this room, the
                            breakout room id is invalid, the room doesn't exist or the guest
                            does not have a valid invite for this room. Guests shall not be
                            able to distinguish between existing rooms and rooms they don't
                            have permission to enter, therefore the response is the same in
                            these cases
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              examples:
                InvalidBreakoutRoomId:
                  summary: Invalid breakout room id
                  value:
                    code: invalid_breakout_room_id
                    message: The provided breakout room ID is invalid
                NoBreakoutRooms:
                  summary: No breakout rooms
                  value:
                    code: no_breakout_rooms
                    message: The requested room has no breakout rooms
                RoomIdMismatch:
                  summary: Room id mismatch
                  value:
                    code: bad_request
                    message: Room id mismatch
        "401":
          description: |
            Either: the provided access token is expired or the
                            provided id or access token is invalid. The WWW-Authenticate
                            header will contain an error description 'session expired' to
                            distinguish between an invalid and an expired token.
                            Or: the provided password was incorrect, in which case the body
                            contains more information.
          headers:
            www-authenticate:
              schema:
                type: string
              description: "will contain 'session expired' to distinguish between an invalid and an expired token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              examples:
                ExpiredOrInvalidAccessToken:
                  summary: Expired or invalid access token
                  value:
                    code: unauthorized
                    message: The session for this user has expired
                WrongRoomPassword:
                  summary: Wrong room password
                  value:
                    code: wrong_room_password
                    message: The provided password does not match the room password
        "403":
          description: The participant has been banned from entering this room
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              example:
                code: banned_from_room
                message: This user has been banned from entering this room
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          description: Invalid body contents received
        "500":
          $ref: "#/components/responses/InternalServerError"
      security: []
  "/rooms/{room_id}/tariff":
    get:
      tags:
        - "api::v1::rooms"
      summary: "Get a room's tariff"
      description: |
        This returns the tariff that applies to the room, typically the tariff of
        the room creator.
      operationId: get_room_tariff
      parameters:
        - name: room_id
          in: path
          description: The id of the room
          required: true
          schema:
            $ref: "#/components/schemas/RoomId"
      responses:
        "200":
          description: "The room's tariff was successfully retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TariffResource"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
        - InviteCode: []
  /services/call_in/start:
    post:
      tags:
        - "api::v1::services::call_in"
      summary: Starts a signaling session
      description: |
        Takes call-in id and pin and returns a ticket for the `/signaling` endpoint. Behaves similar to the
        `/rooms/{room_id}/start` endpoint.
        
        This endpoint is provided for call-in gateways to start a room connection
        for call-in participants. The participant typically has to provide the
        credentials (id and pin) via DTMF (the number pad).
      operationId: post_call_in_start
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartCallInRequestBody"
        required: true
      responses:
        "200":
          description: The dial-in participant has successfully authenticated for the room. Information needed for connecting to the signaling is contained in the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceStartResponse"
        "400":
          description: "`id` and `pin` are not valid for any room."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              example:
                code: invalid_credentials
                message: given call-in id & pin combination is not valid
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  /services/recording/start:
    post:
      tags:
        - "api::v1::services::recording"
      summary: Starts a signaling session for recording
      description: |
        This endpoint is provided for participation of recording and streaming clients
        which will join incognito and receive all the information and media streams required
        for creating a recording or livestream of the meeting.
      operationId: start_recording
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartRecordingRequestBody"
        required: true
      responses:
        "200":
          description: The recording participant has successfully authenticated for the room. Information needed for connecting to the signaling is contained in the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceStartResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Recording has not been configured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardErrorBody"
              example:
                code: not_found
                message: A requested resource could not be found
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  /turn:
    get:
      tags:
        - "api::v1::turn"
      summary: Get a TURN server and corresponding credentials
      description: |
        The returned TURN server can be used with the credentials to circumvent
        NAT restrictions.
      operationId: get_turn
      responses:
        "200":
          description: TURN server and corresponding credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTurnServersResponse"
        "204":
          description: No TURN servers have been configured
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
        - InviteCode: []
  /users/find:
    get:
      tags:
        - "api::v1::users"
      summary: Find users
      description: Query users for autocomplete fields
      operationId: find
      parameters:
        - name: q
          in: query
          description: The query string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFindResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  /users/me:
    get:
      tags:
        - "api::v1::users"
      summary: "Get the current user's profile"
      description: |
        Returns the private user profile of the currently logged-in user. This
        private profile contains information that is not visible in the public
        profile, such as tariff status or the used storage.
      operationId: get_me
      responses:
        "200":
          description: Information about the logged in user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUserProfile"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
    patch:
      tags:
        - "api::v1::users"
      summary: "Patch the current user's profile"
      description: Fields that are not provided in the request body will remain unchanged.
      operationId: patch_users_me
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchMeBody"
        required: true
      responses:
        "200":
          description: User profile was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomResource"
        "400":
          description: |
            Could not modify the user's profile due to wrong
                            syntax or bad values
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
  /users/me/assets:
    get:
      tags:
        - "api::v1::users"
      summary: Get the assets associated with the user.
      description: |
        All assets associated to the requesting user are returned in a list. If no
        pagination query is added, the default page size is used.
      operationId: get_me_assets
      parameters:
        - name: per_page
          in: query
          description: The number of entries per page
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The number of the page
          required: false
          schema:
            type: integer
            format: int64
        - name: sort
          in: query
          description: sort by this field
          required: true
          schema:
            $ref: "#/components/schemas/AssetSorting"
        - name: order
          in: query
          description: ordering direction
          required: true
          schema:
            $ref: "#/components/schemas/Ordering"
      responses:
        "200":
          description: List of accessible assets successfully returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserAssetsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - BearerAuth: []
components:
  schemas:
    AssetId:
      type: string
      format: uuid
      description: The id of an asset
      example: 00000000-0000-0000-0000-0000aabbcc00
    AssetResource:
      type: object
      description: Representation of an asset resource
      required:
        - id
        - filename
        - created_at
        - kind
        - size
      properties:
        created_at:
          type: string
          format: date-time
          description: The timestamp the asset was created
        filename:
          type: string
          description: The filename of the asset
        id:
          $ref: "#/components/schemas/AssetId"
        kind:
          type: string
          description: The asset kind
        namespace:
          type: string
          description: The namespace of the asset
          nullable: true
        size:
          type: integer
          format: int64
          description: The size of the asset in bytes
      example:
        created_at: "2024-06-18T11:22:33Z"
        filename: recording.webm
        id: 00000000-0000-0000-0000-0000aabbcc00
        kind: record
        namespace: recording
        size: 98765432
    AssetSorting:
      type: string
      description: Properties by which a list of assets can get sorted.
      enum:
        - filename
        - size
        - namespace
        - kind
        - created_at
    BreakoutRoomId:
      type: string
      format: uuid
      description: The id of a breakout room
      example: 00000000-0000-0000-0000-0000badcab1e
    CallInId:
      $ref: "#/components/schemas/NumericId"
    CallInPassword:
      $ref: "#/components/schemas/NumericId"
    CodeVerified:
      type: object
      description: Verify response body for *POST /invite/verify*
      required:
        - room_id
        - password_required
      properties:
        password_required:
          type: boolean
          description: If password is required
        room_id:
          $ref: "#/components/schemas/RoomId"
    ErrorBody:
      oneOf:
        - $ref: "#/components/schemas/StandardErrorBody"
        - $ref: "#/components/schemas/ValidationErrorBody"
      description: The body of an error response
    EventId:
      type: string
      format: uuid
      description: The identifier of an event
      example: 00000000-0000-0000-0000-004433221100
    GetFindResponse:
      type: array
      items:
        $ref: "#/components/schemas/GetFindResponseItem"
      description: The response for the find endpoint
    GetFindResponseItem:
      oneOf:
        - allOf:
            - $ref: "#/components/schemas/PublicUserProfile"
            - type: object
              required:
                - kind
              properties:
                kind:
                  type: string
                  enum:
                    - registered
        - allOf:
            - $ref: "#/components/schemas/UnregisteredUser"
            - type: object
              required:
                - kind
              properties:
                kind:
                  type: string
                  enum:
                    - unregistered
      description: The response for users found
      discriminator:
        propertyName: kind
    GetLoginResponse:
      type: object
      description: "Body of the response to a *GET* request on `/auth/login`"
      required:
        - oidc
      properties:
        oidc:
          $ref: "#/components/schemas/OidcProvider"
    GetRoomsAssetsResponseBody:
      type: array
      items:
        $ref: "#/components/schemas/AssetResource"
      description: "Response for *GET /rooms/{room_id}/assets*"
      example:
        - created_at: "2024-06-18T11:22:33Z"
          filename: recording.webm
          id: 00000000-0000-0000-0000-0000aabbcc00
          kind: record
          namespace: recording
          size: 98765432
    GetRoomsInvitesResponseBody:
      type: array
      items:
        $ref: "#/components/schemas/InviteResource"
      description: "Response for *GET /rooms/{room_id}/invites*"
      example:
        - active: true
          created: "2024-06-18T11:22:33Z"
          created_by:
            avatar_url: "https://gravatar.com/avatar/c160f8cc69a4f0bf2b0362752353d060"
            display_name: Alice Adams
            email: alice@example.com
            firstname: Alice
            id: 00000000-0000-0000-0000-0000000a11c3
            lastname: Adams
            title: ""
          expiration: ~
          invite_code: 00000000-0000-0000-0000-0000deadbeef
          room_id: 00000000-0000-0000-0000-0000abadcafe
          updated: "2024-06-20T14:16:19Z"
          updated_by:
            avatar_url: "https://gravatar.com/avatar/c160f8cc69a4f0bf2b0362752353d060"
            display_name: Alice Adams
            email: alice@example.com
            firstname: Alice
            id: 00000000-0000-0000-0000-0000000a11c3
            lastname: Adams
            title: ""
    GetRoomsResponse:
      type: array
      items:
        $ref: "#/components/schemas/RoomResource"
      description: "The JSON body returned by the `/rooms` `GET` endpoint"
    GetTurnServersResponse:
      type: array
      items:
        $ref: "#/components/schemas/IceServer"
      description: Response to the *GET /turn* endpoint request
    GetUserAssetsResponse:
      type: object
      description: "Response body for the `GET /v1/users/me/assets` endpoint"
      required:
        - owned_assets
      properties:
        owned_assets:
          type: array
          items:
            $ref: "#/components/schemas/UserAssetResource"
          description: Assets owned by the user
      example:
        owned_assets:
          - created_at: "2024-06-18T11:22:33Z"
            event_id: 00000000-0000-0000-0000-004433221100
            filename: recording.webm
            id: 00000000-0000-0000-0000-0000aabbcc00
            kind: record
            namespace: recording
            room_id: 00000000-0000-0000-0000-0000abadcafe
            size: 98765432
    IceServer:
      oneOf:
        - $ref: "#/components/schemas/Turn"
        - $ref: "#/components/schemas/Stun"
      description: Description of an ICE server
    InviteCodeId:
      type: string
      format: uuid
      description: An invite code
      example: 00000000-0000-0000-0000-0000deadbeef
    InviteResource:
      type: object
      description: |
        Public invite details
        
        Contains general public information about a room.
      required:
        - invite_code
        - created
        - created_by
        - updated
        - updated_by
        - room_id
        - active
      properties:
        active:
          type: boolean
          description: If the invite is active
        created:
          type: string
          format: date-time
          description: The timestamp this invite was created at
        created_by:
          $ref: "#/components/schemas/PublicUserProfile"
        expiration:
          type: string
          format: date-time
          description: Optional expiration date of the invite
          nullable: true
        invite_code:
          $ref: "#/components/schemas/InviteCodeId"
        room_id:
          $ref: "#/components/schemas/RoomId"
        updated:
          type: string
          format: date-time
          description: The timestamp this invite was updated at
        updated_by:
          $ref: "#/components/schemas/PublicUserProfile"
      example:
        active: true
        created: "2024-06-18T11:22:33Z"
        created_by:
          avatar_url: "https://gravatar.com/avatar/c160f8cc69a4f0bf2b0362752353d060"
          display_name: Alice Adams
          email: alice@example.com
          firstname: Alice
          id: 00000000-0000-0000-0000-0000000a11c3
          lastname: Adams
          title: ""
        expiration: ~
        invite_code: 00000000-0000-0000-0000-0000deadbeef
        room_id: 00000000-0000-0000-0000-0000abadcafe
        updated: "2024-06-20T14:16:19Z"
        updated_by:
          avatar_url: "https://gravatar.com/avatar/c160f8cc69a4f0bf2b0362752353d060"
          display_name: Alice Adams
          email: alice@example.com
          firstname: Alice
          id: 00000000-0000-0000-0000-0000000a11c3
          lastname: Adams
          title: ""
    NumericId:
      type: string
      description: A string containing number characters
      example: "0000000000"
      maxLength: 10
      minLength: 10
      pattern: "[0-9]+"
    OidcProvider:
      type: object
      description: Represents an OIDC provider
      required:
        - name
        - url
      properties:
        name:
          type: string
          description: The name of the provider
        url:
          type: string
          description: The url of the provider
    Ordering:
      type: string
      description: The sorting order that should be applied
      enum:
        - ascending
        - descending
    PageLink:
      type: string
      example: "<https://api.example.org/resource?page=2>; rel='next', <https://api.example.org/resource?page=5>; rel='last'"
    PatchMeBody:
      type: object
      description: Used to modify user settings.
      properties:
        conference_theme:
          type: string
          description: The conference theme
          nullable: true
        dashboard_theme:
          type: string
          description: The dashboard theme
          nullable: true
        display_name:
          type: string
          description: "The user's display name"
          nullable: true
        language:
          type: string
          description: "The user's language"
          nullable: true
        title:
          type: string
          description: "The user's title"
          nullable: true
      example:
        avatar_url: "https://gravatar.com/avatar/c160f8cc69a4f0bf2b0362752353d060"
        display_name: Alice Adams
        email: alice@example.com
        firstname: Alice
        id: 00000000-0000-0000-0000-0000000a11c3
        lastname: Adams
        title: ""
    PatchRoomsRequestBody:
      type: object
      description: API request parameters to patch a room
      properties:
        password:
          allOf:
            - $ref: "#/components/schemas/RoomPassword"
          nullable: true
        waiting_room:
          type: boolean
          description: If waiting room is enabled
          nullable: true
    PostInviteRequestBody:
      type: object
      description: "Body for *POST /rooms/{room_id}/invites*"
      properties:
        expiration:
          type: string
          format: date-time
          description: Optional expiration date of the invite
          nullable: true
      example:
        expiration: "2024-06-20T14:16:19Z"
    PostInviteVerifyRequestBody:
      type: object
      description: Verify body for *POST /invite/verify*
      required:
        - invite_code
      properties:
        invite_code:
          $ref: "#/components/schemas/InviteCodeId"
    PostLoginRequestBody:
      type: object
      description: "Body of a *POST* request on `/auth/login`"
      required:
        - id_token
      properties:
        id_token:
          type: string
          description: The id token to use for the login
          example: bG9yZW0gaXBzdW0sIHF1aWEgZG9sb3Igc2
    PostLoginResponse:
      type: object
      description: "Body of the response to a *POST* request on `/auth/login`"
      required:
        - permissions
      properties:
        permissions:
          type: array
          items:
            type: string
          description: Permissions is a set of strings that each define a permission a user has.
          uniqueItems: true
    PostRoomsRequestBody:
      type: object
      description: API request parameters to create a new room
      properties:
        enable_sip:
          type: boolean
          description: Enable/Disable sip for this room; defaults to false when not set
        password:
          allOf:
            - $ref: "#/components/schemas/RoomPassword"
          nullable: true
        waiting_room:
          type: boolean
          description: |
            Indicates whether the meeting room should have the waiting room enabled.
            When not present, the waiting room will be disabled.
    PostRoomsStartInvitedRequestBody:
      type: object
      description: "The JSON body expected when making a *POST /rooms/{room_id}/start_invited*"
      required:
        - invite_code
      properties:
        breakout_room:
          allOf:
            - $ref: "#/components/schemas/BreakoutRoomId"
        invite_code:
          type: string
          description: The invite code
        password:
          allOf:
            - $ref: "#/components/schemas/RoomPassword"
        resumption:
          allOf:
            - $ref: "#/components/schemas/ResumptionToken"
      example:
        breakout_room: 00000000-0000-0000-0000-0000badcab1e
        invite_code: 00000000-0000-0000-0000-0000deadbeef
        password: v3rys3cr3t
        resumption: 654321zyxwvutsrqponmlkjihgfedcba654321zyxwvutsrqponmlkjihgfedcba
    PostRoomsStartRequestBody:
      type: object
      description: "The JSON body expected when making a *POST /rooms/{room_id}/start*"
      properties:
        breakout_room:
          allOf:
            - $ref: "#/components/schemas/BreakoutRoomId"
        resumption:
          allOf:
            - $ref: "#/components/schemas/ResumptionToken"
      example:
        breakout_room: 00000000-0000-0000-0000-00000badcafe
        resumption: 654321zyxwvutsrqponmlkjihgfedcba654321zyxwvutsrqponmlkjihgfedcba
    PrivateUserProfile:
      type: object
      description: |
        Private user profile.
        
        Similar to [`PublicUserProfile`], but contains additional "private" information about a user.
        Is only accessible to the user himself.
        Is used on */users/me* endpoints.
      required:
        - id
        - email
        - title
        - firstname
        - lastname
        - display_name
        - avatar_url
        - dashboard_theme
        - conference_theme
        - language
        - tariff_status
        - used_storage
      properties:
        avatar_url:
          type: string
          description: "The user's avatar URL"
        conference_theme:
          type: string
          description: The conference theme
        dashboard_theme:
          type: string
          description: The dashboard theme
        display_name:
          type: string
          description: "The user's display name"
        email:
          type: string
          description: The email of the user
        firstname:
          type: string
          description: "The user's first name"
        id:
          $ref: "#/components/schemas/UserId"
        language:
          type: string
          description: The language for the user
        lastname:
          type: string
          description: "The user's last name"
        tariff_status:
          $ref: "#/components/schemas/TariffStatus"
        title:
          type: string
          description: The title of the user
        used_storage:
          type: integer
          format: int64
          description: "The user's used storage"
          minimum: 0
    PublicUserProfile:
      type: object
      description: |
        Public user details.
        
        Contains general "public" information about a user. Is accessible to all other users.
      required:
        - id
        - email
        - title
        - firstname
        - lastname
        - display_name
        - avatar_url
      properties:
        avatar_url:
          type: string
          description: "The user's avatar URL"
        display_name:
          type: string
          description: "The user's display name"
        email:
          type: string
          description: The email of the user
        firstname:
          type: string
          description: "The user's first name"
        id:
          $ref: "#/components/schemas/UserId"
        lastname:
          type: string
          description: "The user's last name"
        title:
          type: string
          description: The title of the user
      example:
        avatar_url: "https://gravatar.com/avatar/c160f8cc69a4f0bf2b0362752353d060"
        display_name: Alice Adams
        email: alice@example.com
        firstname: Alice
        id: 00000000-0000-0000-0000-0000000a11c3
        lastname: Adams
        title: ""
    PutInviteRequestBody:
      type: object
      description: "Body for *PUT /rooms/{room_id}/invites/{invite_code}*"
      properties:
        expiration:
          type: string
          format: date-time
          description: Optional expiration date of the invite
          nullable: true
      example:
        expiration: "2024-06-20T14:16:19Z"
    PutSipConfig:
      type: object
      description: "Body for the `PUT /rooms/{room_id}/sip` endpoint"
      properties:
        lobby:
          type: boolean
          description: |
            Enable or disable the lobby for users that join throughh SIP. Defaults
            to [`false`] when not explicity set on creation.
        password:
          allOf:
            - $ref: "#/components/schemas/CallInPassword"
      example:
        lobby: true
        password: "9876543210"
    ResumptionToken:
      type: string
      description: A resumption token
    RoomId:
      type: string
      format: uuid
      description: The id of a room
      example: 00000000-0000-0000-0000-0000abadcafe
    RoomPassword:
      type: string
      description: A room password
      example: v3rys3cr3t
      maxLength: 255
      minLength: 1
    RoomResource:
      type: object
      description: |
        A Room
        
        Contains all room information. Is only be accessible to the owner and users with
        appropriate permissions.
      required:
        - id
        - created_by
        - created_at
        - waiting_room
      properties:
        created_at:
          $ref: "#/components/schemas/Timestamp"
        created_by:
          $ref: "#/components/schemas/PublicUserProfile"
        id:
          $ref: "#/components/schemas/RoomId"
        password:
          allOf:
            - $ref: "#/components/schemas/RoomPassword"
        waiting_room:
          type: boolean
          description: If waiting room is enabled
      example:
        created_at: "1970-01-01T00:00:00Z"
        created_by:
          avatar_url: "https://gravatar.com/avatar/c160f8cc69a4f0bf2b0362752353d060"
          display_name: Alice Adams
          email: alice@example.com
          firstname: Alice
          id: 00000000-0000-0000-0000-0000000a11c3
          lastname: Adams
          title: ""
        id: 00000000-0000-0000-0000-000000000000
        password: v3rys3cr3t
        waiting_room: false
    RoomsStartResponse:
      type: object
      description: The JSON body returned from the start endpoints supporting session resumption
      required:
        - ticket
        - resumption
      properties:
        resumption:
          $ref: "#/components/schemas/ResumptionToken"
        ticket:
          $ref: "#/components/schemas/TicketToken"
      example:
        resumption: 654321zyxwvutsrqponmlkjihgfedcba654321zyxwvutsrqponmlkjihgfedcba
        ticket: abcdefghijklmnopqrstuvwxyz123456abcdefghijklmnopqrstuvwxyz123456
    ServiceStartResponse:
      type: object
      description: "Response for `POST /**/**/start` endpoints"
      required:
        - ticket
        - resumption
      properties:
        resumption:
          $ref: "#/components/schemas/ResumptionToken"
        ticket:
          $ref: "#/components/schemas/TicketToken"
    SipConfigResource:
      type: object
      description: "Response for the `GET /rooms/{room_id}/sip` endpoint"
      required:
        - room
        - sip_id
        - password
        - lobby
      properties:
        lobby:
          type: boolean
          description: Flag if the room is a lobby
        password:
          $ref: "#/components/schemas/CallInPassword"
        room:
          $ref: "#/components/schemas/RoomId"
        sip_id:
          $ref: "#/components/schemas/CallInId"
      example:
        lobby: false
        password: "9876543210"
        room: 00000000-0000-0000-0000-0000abadcafe
        sip_id: "0123456789"
    StandardErrorBody:
      type: object
      description: Standard API error body
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Machine readable error code
        message:
          type: string
          description: Human readable message
    StartCallInRequestBody:
      type: object
      description: "Body for the `POST /services/call_in/start` endpoint"
      required:
        - id
        - pin
      properties:
        id:
          $ref: "#/components/schemas/CallInId"
        pin:
          $ref: "#/components/schemas/CallInPassword"
    StartRecordingRequestBody:
      type: object
      description: "Response for the `POST /services/recording/start` endpoint"
      required:
        - room_id
      properties:
        breakout_room:
          allOf:
            - $ref: "#/components/schemas/BreakoutRoomId"
          nullable: true
        room_id:
          $ref: "#/components/schemas/RoomId"
    Stun:
      type: object
      description: STUN Server for users.
      required:
        - uris
      properties:
        uris:
          type: array
          items:
            type: string
          description: STUN URIs for this TURN server following rfc7065
    TariffId:
      type: string
      format: uuid
      description: The id of a tariff
    TariffModuleResource:
      type: object
      description: Tariff information related to a specific module
      required:
        - features
      properties:
        features:
          type: array
          items:
            type: string
          description: Enabled features for the tariff
          uniqueItems: true
    TariffResource:
      type: object
      description: Information related to a specific tariff
      required:
        - id
        - name
        - quotas
        - enabled_modules
        - disabled_features
        - modules
      properties:
        disabled_features:
          type: array
          items:
            type: string
          description: "Disabled features for the tariff  (deprecated, use 'modules' instead)"
          deprecated: true
          uniqueItems: true
        enabled_modules:
          type: array
          items:
            type: string
          description: "Enabled modules for the tariff (deprecated, use 'modules' instead)"
          deprecated: true
          uniqueItems: true
        id:
          $ref: "#/components/schemas/TariffId"
        modules:
          type: object
          description: "Enabled modules for the tariff, including their enabled features"
          additionalProperties:
            $ref: "#/components/schemas/TariffModuleResource"
        name:
          type: string
          description: The name of the tariff
        quotas:
          type: object
          description: The quotas of the tariff
          additionalProperties:
            type: integer
            format: int64
            minimum: 0
      example:
        disabled_features:
          - "recording::stream"
        enabled_modules:
          - chat
          - core
          - media
          - moderation
          - recording
        id: 00000000-0000-0000-0000-000000000000
        modules:
          chat:
            features: []
          core:
            features: []
          media:
            features: []
          moderation:
            features: []
          recording:
            features:
              - record
        name: Starter tariff
        quotas:
          max_storage: 50000
    TariffStatus:
      type: string
      enum:
        - default
        - paid
        - downgraded
    TicketToken:
      type: string
      description: A ticket token
    Timestamp:
      type: string
      format: date-time
      description: |
        A UTC DateTime wrapper that implements ToRedisArgs and FromRedisValue.
        
        The values are stores as unix timestamps in redis.
    Turn:
      type: object
      description: TURN access credentials for users.
      required:
        - username
        - password
        - ttl
        - uris
      properties:
        password:
          type: string
          description: The TURN access username
        ttl:
          type: string
          description: Time to live of the TURN service
        uris:
          type: array
          items:
            type: string
          description: URIs of the TURN service
        username:
          type: string
          description: The TURN access username
    UnregisteredUser:
      type: object
      description: Representation of a unregistered user
      required:
        - email
        - firstname
        - lastname
        - avatar_url
      properties:
        avatar_url:
          type: string
          description: Avatar URL for the unregistered user
        email:
          type: string
          description: Email of the unregistered user
        firstname:
          type: string
          description: First name of the unregistered user
        lastname:
          type: string
          description: Last name of the unregistered user
    UserAssetResource:
      allOf:
        - $ref: "#/components/schemas/AssetResource"
        - type: object
          required:
            - room_id
          properties:
            event_id:
              allOf:
                - $ref: "#/components/schemas/EventId"
            room_id:
              $ref: "#/components/schemas/RoomId"
      description: Information related to a specific asset
      example:
        created_at: "2024-06-18T11:22:33Z"
        event_id: 00000000-0000-0000-0000-004433221100
        filename: recording.webm
        id: 00000000-0000-0000-0000-0000aabbcc00
        kind: record
        namespace: recording
        room_id: 00000000-0000-0000-0000-0000abadcafe
        size: 98765432
    UserId:
      type: string
      format: uuid
      description: The id of a user
    ValidationErrorBody:
      type: object
      description: The body of a validation error response
      required:
        - code
        - message
        - errors
      properties:
        code:
          type: string
          description: Machine readable error message
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationErrorEntry"
          description: A list validation errors
        message:
          type: string
          description: Human readable message
    ValidationErrorEntry:
      type: object
      description: An entry in a validation error list
      required:
        - code
      properties:
        code:
          type: string
          description: Machine readable error message
        field:
          type: string
          description: |
            The field related to the error
            
            If the value is [`None`] that means the error happened at struct level
          nullable: true
        message:
          type: string
          description: Human readable error message
          nullable: true
  responses:
    BinaryData:
      description: Binary data
    Forbidden:
      description: The authorized user has no permission to access the requested resource
    InternalServerError:
      description: An internal server error occurred
    NotFound:
      description: The requested data could not be found
    Unauthorized:
      description: |
        The provided access token is expired or the provided id or access token is invalid.
                The WWW-Authenticate header will contain an error description 'session expired' to distinguish between
                an invalid and an expired token
      headers:
        www-authenticate:
          schema:
            type: string
          description: |
            
            Will contain 'session expired' to distinguish between an invalid and an expired token.
            
            Examples:
            
                Bearer error="invalid_token", error_description="The provided access token is invalid"
                Bearer error="invalid_request", error_description="The user session expired"
      content:
        application/json:
          schema:
            type: object
            description: Internal reusable dummy type for utoipa unauthorized error
            required:
              - code
              - message
            properties:
              code:
                type: string
                description: Machine readable error code
              message:
                type: string
                description: Human readable message
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    InviteCode:
      type: http
      scheme: bearer
tags:
  - name: "api::v1::auth"
    description: Endpoints related to authentication
  - name: "api::v1::invites"
    description: Endpoints related to meeting invites
  - name: "api::v1::rooms"
    description: Endpoints related to meeting rooms
  - name: "api::v1::assets"
    description: Endpoints related to file assets
  - name: "api::v1::sip_configs"
    description: Endpoints related to SIP configuration
  - name: "api::v1::services::call_in"
    description: Endpoints related to the meeting call-in service
  - name: "api::v1::services::recording"
    description: Endpoints related to the meeting recording service
  - name: "api::v1::turn"
    description: Endpoints related TURN server usage
  - name: "api::v1::users"
    description: Endpoints related to user information and management